package com.sjl.bookmark.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sjl.bookmark.entity.table.HistoryExpress;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_EXPRESS".
*/
public class HistoryExpressDao extends AbstractDao<HistoryExpress, String> {

    public static final String TABLENAME = "HISTORY_EXPRESS";

    /**
     * Properties of entity HistoryExpress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PostId = new Property(0, String.class, "postId", true, "POST_ID");
        public final static Property CompanyParam = new Property(1, String.class, "companyParam", false, "COMPANY_PARAM");
        public final static Property CompanyName = new Property(2, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property CompanyIcon = new Property(3, String.class, "companyIcon", false, "COMPANY_ICON");
        public final static Property CheckStatus = new Property(4, String.class, "checkStatus", false, "CHECK_STATUS");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
        public final static Property SignTime = new Property(6, String.class, "signTime", false, "SIGN_TIME");
    }


    public HistoryExpressDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryExpressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_EXPRESS\" (" + //
                "\"POST_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: postId
                "\"COMPANY_PARAM\" TEXT NOT NULL ," + // 1: companyParam
                "\"COMPANY_NAME\" TEXT NOT NULL ," + // 2: companyName
                "\"COMPANY_ICON\" TEXT NOT NULL ," + // 3: companyIcon
                "\"CHECK_STATUS\" TEXT NOT NULL ," + // 4: checkStatus
                "\"REMARK\" TEXT," + // 5: remark
                "\"SIGN_TIME\" TEXT);"); // 6: signTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_EXPRESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryExpress entity) {
        stmt.clearBindings();
 
        String postId = entity.getPostId();
        if (postId != null) {
            stmt.bindString(1, postId);
        }
        stmt.bindString(2, entity.getCompanyParam());
        stmt.bindString(3, entity.getCompanyName());
        stmt.bindString(4, entity.getCompanyIcon());
        stmt.bindString(5, entity.getCheckStatus());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
 
        String signTime = entity.getSignTime();
        if (signTime != null) {
            stmt.bindString(7, signTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryExpress entity) {
        stmt.clearBindings();
 
        String postId = entity.getPostId();
        if (postId != null) {
            stmt.bindString(1, postId);
        }
        stmt.bindString(2, entity.getCompanyParam());
        stmt.bindString(3, entity.getCompanyName());
        stmt.bindString(4, entity.getCompanyIcon());
        stmt.bindString(5, entity.getCheckStatus());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
 
        String signTime = entity.getSignTime();
        if (signTime != null) {
            stmt.bindString(7, signTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public HistoryExpress readEntity(Cursor cursor, int offset) {
        HistoryExpress entity = new HistoryExpress( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // postId
            cursor.getString(offset + 1), // companyParam
            cursor.getString(offset + 2), // companyName
            cursor.getString(offset + 3), // companyIcon
            cursor.getString(offset + 4), // checkStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // signTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryExpress entity, int offset) {
        entity.setPostId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCompanyParam(cursor.getString(offset + 1));
        entity.setCompanyName(cursor.getString(offset + 2));
        entity.setCompanyIcon(cursor.getString(offset + 3));
        entity.setCheckStatus(cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSignTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HistoryExpress entity, long rowId) {
        return entity.getPostId();
    }
    
    @Override
    public String getKey(HistoryExpress entity) {
        if(entity != null) {
            return entity.getPostId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryExpress entity) {
        return entity.getPostId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
